// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

package main

import (
    "fmt"
)

// Lemma 1: Given a natural number n, n + 1 shares no prime factors with it.
// Proof:   Prime numbers are greater than 1. If a prime number divides two numbers s and t, then we can write s = t + ax, where a is an integer.
//          But, there does not exist an integer a and a prime p (greater than 1) such that ap = 1.

// Lemma 2: Let F(n) be the set of divisors of n, including 1. Given a number n = xy where x and y share no prime factors, then F(n) = S = { ij | i in F(x) and j in F(y) }.
// Proof:   Let d be a divisor of n, then assume (seeking contradiction) that n is not in S. Because n = xy, d must draw its prime factors from either x or y. 
//          Define two numbers d_x and d_y such that d_x * d_y = d, and such that d_x and d_y share all their prime factors with x and y respectively.
//          Note: either d_x or d_y could equal one, if d contains no prime factors from either x or y. If d contains no prime factors from either, it must be 1 because it divides n. 
//          But because d_x shares all its divisors with x and d divides n, d_x divides x and therefore d_x in F(x). Similarly for y. Therefore d is in S, contradiction.

// Lemma 3: Let F(n) be the set of divisors of n, including 1. Given a number n = xy where x and y share no prime factors, |F(n)| = |F(x)||F(y)|
// Proof:   Observe that the union of F(x) and F(y) is {1}. 
//          Let d in F(n). We know from lemma 3 that d = d_x * d_y where d_x in F(x) and d_y in F(y). 
//          Because x and y share no prime factors, there cannot exist d_x' and d_y' such that d_x' * d_y' = d but d_x' does not equal d_x or d_y' does not equal d_y. 
//          Therefore, each element of F(n) corresponds to exactly one pair of elements from F(x) and F(y). 

func main() { 
    for i := 8; true; i++ {
        if triangleDivisors(i) > 500 {
            fmt.Printf("T(%d) = %d has %d divisors\n", i, i * (i + 1) / 2, triangleDivisors(i))
            break
        }
    }
}

// @parameter n the number of the triangle number, not its value. the n in T(n), not the value of T(n). 
func triangleDivisors(n int) int {
    // By lemma 3, equal to divisors(T(n))
    if n % 2 == 0 {
        return (divisors(n/2) + 1) * (divisors(n + 1) + 1)
    } else {
        return (divisors(n) + 1) * (divisors((n + 1) / 2) + 1)
    }
}

func divisors(n int) int {
    total := 0
    limit :=  (n + 1) / 2
    for i := 2; i <= limit; i++ {
        if n % i == 0 {
            total += 1
        }
    }
    return total
}
